// Auto-generated by Stone, do not modify.
var routes = {};

/**
 * Disables the access token used to authenticate the call.
 * @function Dropbox#authTokenRevoke
 * @arg {null} arg - The request parameters.
 * @returns {null}
 */
routes.authTokenRevoke = function (arg) {
  return this.request('auth/token/revoke', arg, 'api', 'rpc');
};

/**
 * Copy a file or folder to a different location in the user's Dropbox. If the
 * source path is a folder all its contents will be copied.
 * @function Dropbox#filesCopy
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.from_path - Path in the user's Dropbox to be copied or
 * moved.
 * @arg {String} arg.to_path - Path in the user's Dropbox that is the
 * destination.
 * @returns {Object}
 */
routes.filesCopy = function (arg) {
  return this.request('files/copy', arg, 'api', 'rpc');
};

/**
 * Get a copy reference to a file or folder. This reference string can be used
 * to save that file or folder to another user's Dropbox by passing it to
 * copy_reference/save.
 * @function Dropbox#filesCopyReferenceGet
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the file or folder you want to get a
 * copy reference to.
 * @returns {Object}
 */
routes.filesCopyReferenceGet = function (arg) {
  return this.request('files/copy_reference/get', arg, 'api', 'rpc');
};

/**
 * Save a copy reference returned by copy_reference/get to the user's Dropbox.
 * @function Dropbox#filesCopyReferenceSave
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.copy_reference - A copy reference returned by
 * copy_reference/get.
 * @arg {String} arg.path - Path in the user's Dropbox that is the destination.
 * @returns {Object}
 */
routes.filesCopyReferenceSave = function (arg) {
  return this.request('files/copy_reference/save', arg, 'api', 'rpc');
};

/**
 * Create a folder at a given path.
 * @function Dropbox#filesCreateFolder
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - Path in the user's Dropbox to create.
 * @returns {Object}
 */
routes.filesCreateFolder = function (arg) {
  return this.request('files/create_folder', arg, 'api', 'rpc');
};

/**
 * Delete the file or folder at a given path. If the path is a folder, all its
 * contents will be deleted too. A successful response indicates that the file
 * or folder was deleted. The returned metadata will be the corresponding
 * FileMetadata or FolderMetadata for the item at time of deletion, and not a
 * DeletedMetadata object.
 * @function Dropbox#filesDelete
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - Path in the user's Dropbox to delete.
 * @returns {Object}
 */
routes.filesDelete = function (arg) {
  return this.request('files/delete', arg, 'api', 'rpc');
};

/**
 * Returns the metadata for a file or folder. Note: Metadata for the root folder
 * is unsupported.
 * @function Dropbox#filesGetMetadata
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path of a file or folder on Dropbox.
 * @arg {Boolean} arg.include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @arg {Boolean} arg.include_deleted - If true, DeletedMetadata will be
 * returned for deleted file or folder, otherwise LookupError.not_found will be
 * returned.
 * @arg {Boolean} arg.include_has_explicit_shared_members - If true, the results
 * will include a flag for each file indicating whether or not  that file has
 * any explicit members.
 * @returns {Object}
 */
routes.filesGetMetadata = function (arg) {
  return this.request('files/get_metadata', arg, 'api', 'rpc');
};

/**
 * Get a temporary link to stream content of a file. This link will expire in
 * four hours and afterwards you will get 410 Gone. Content-Type of the link is
 * determined automatically by the file's mime type.
 * @function Dropbox#filesGetTemporaryLink
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the file you want a temporary link to.
 * @returns {Object}
 */
routes.filesGetTemporaryLink = function (arg) {
  return this.request('files/get_temporary_link', arg, 'api', 'rpc');
};

/**
 * Returns the contents of a folder.
 * @function Dropbox#filesListFolder
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the folder you want to see the contents
 * of.
 * @arg {Boolean} arg.recursive - If true, the list folder operation will be
 * applied recursively to all subfolders and the response will contain contents
 * of all subfolders.
 * @arg {Boolean} arg.include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @arg {Boolean} arg.include_deleted - If true, the results will include
 * entries for files and folders that used to exist but were deleted.
 * @arg {Boolean} arg.include_has_explicit_shared_members - If true, the results
 * will include a flag for each file indicating whether or not  that file has
 * any explicit members.
 * @returns {Object}
 */
routes.filesListFolder = function (arg) {
  return this.request('files/list_folder', arg, 'api', 'rpc');
};

/**
 * Once a cursor has been retrieved from list_folder, use this to paginate
 * through all files and retrieve updates to the folder.
 * @function Dropbox#filesListFolderContinue
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - The cursor returned by your last call to
 * list_folder or list_folder/continue.
 * @returns {Object}
 */
routes.filesListFolderContinue = function (arg) {
  return this.request('files/list_folder/continue', arg, 'api', 'rpc');
};

/**
 * A way to quickly get a cursor for the folder's state. Unlike list_folder,
 * list_folder/get_latest_cursor doesn't return any entries. This endpoint is
 * for app which only needs to know about new files and modifications and
 * doesn't need to know about files that already exist in Dropbox.
 * @function Dropbox#filesListFolderGetLatestCursor
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the folder you want to see the contents
 * of.
 * @arg {Boolean} arg.recursive - If true, the list folder operation will be
 * applied recursively to all subfolders and the response will contain contents
 * of all subfolders.
 * @arg {Boolean} arg.include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @arg {Boolean} arg.include_deleted - If true, the results will include
 * entries for files and folders that used to exist but were deleted.
 * @arg {Boolean} arg.include_has_explicit_shared_members - If true, the results
 * will include a flag for each file indicating whether or not  that file has
 * any explicit members.
 * @returns {Object}
 */
routes.filesListFolderGetLatestCursor = function (arg) {
  return this.request('files/list_folder/get_latest_cursor', arg, 'api', 'rpc');
};

/**
 * A longpoll endpoint to wait for changes on an account. In conjunction with
 * list_folder/continue, this call gives you a low-latency way to monitor an
 * account for file changes. The connection will block until there are changes
 * available or a timeout occurs. This endpoint is useful mostly for client-side
 * apps. If you're looking for server-side notifications, check out our webhooks
 * documentation https://www.dropbox.com/developers/reference/webhooks.
 * @function Dropbox#filesListFolderLongpoll
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - A cursor as returned by list_folder or
 * list_folder/continue. Cursors retrieved by setting
 * ListFolderArg.include_media_info to true are not supported.
 * @arg {Number} arg.timeout - A timeout in seconds. The request will block for
 * at most this length of time, plus up to 90 seconds of random jitter added to
 * avoid the thundering herd problem. Care should be taken when using this
 * parameter, as some network infrastructure does not support long timeouts.
 * @returns {Object}
 */
routes.filesListFolderLongpoll = function (arg) {
  return this.request('files/list_folder/longpoll', arg, 'notify', 'rpc');
};

/**
 * Return revisions of a file
 * @function Dropbox#filesListRevisions
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the file you want to see the revisions
 * of.
 * @arg {Number} arg.limit - The maximum number of revision entries returned.
 * @returns {Object}
 */
routes.filesListRevisions = function (arg) {
  return this.request('files/list_revisions', arg, 'api', 'rpc');
};

/**
 * Move a file or folder to a different location in the user's Dropbox. If the
 * source path is a folder all its contents will be moved.
 * @function Dropbox#filesMove
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.from_path - Path in the user's Dropbox to be copied or
 * moved.
 * @arg {String} arg.to_path - Path in the user's Dropbox that is the
 * destination.
 * @returns {Object}
 */
routes.filesMove = function (arg) {
  return this.request('files/move', arg, 'api', 'rpc');
};

/**
 * Permanently delete the file or folder at a given path (see
 * https://www.dropbox.com/en/help/40). Note: This endpoint is only available
 * for Dropbox Business apps.
 * @function Dropbox#filesPermanentlyDelete
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - Path in the user's Dropbox to delete.
 * @returns {null}
 */
routes.filesPermanentlyDelete = function (arg) {
  return this.request('files/permanently_delete', arg, 'api', 'rpc');
};

/**
 * Restore a file to a specific revision
 * @function Dropbox#filesRestore
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the file you want to restore.
 * @arg {String} arg.rev - The revision to restore for the file.
 * @returns {Object}
 */
routes.filesRestore = function (arg) {
  return this.request('files/restore', arg, 'api', 'rpc');
};

/**
 * Save a specified URL into a file in user's Dropbox. If the given path already
 * exists, the file will be renamed to avoid the conflict (e.g. myfile (1).txt).
 * @function Dropbox#filesSaveUrl
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path in Dropbox where the URL will be saved to.
 * @arg {String} arg.url - The URL to be saved.
 * @returns {Object}
 */
routes.filesSaveUrl = function (arg) {
  return this.request('files/save_url', arg, 'api', 'rpc');
};

/**
 * Check the status of a save_url job.
 * @function Dropbox#filesSaveUrlCheckJobStatus
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 * @returns {Object}
 */
routes.filesSaveUrlCheckJobStatus = function (arg) {
  return this.request('files/save_url/check_job_status', arg, 'api', 'rpc');
};

/**
 * Searches for files and folders. Note: Recent changes may not immediately be
 * reflected in search results due to a short delay in indexing.
 * @function Dropbox#filesSearch
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path in the user's Dropbox to search. Should
 * probably be a folder.
 * @arg {String} arg.query - The string to search for. The search string is
 * split on spaces into multiple tokens. For file name searching, the last token
 * is used for prefix matching (i.e. "bat c" matches "bat cave" but not "batman
 * car").
 * @arg {Number} arg.start - The starting index within the search results (used
 * for paging).
 * @arg {Number} arg.max_results - The maximum number of search results to
 * return.
 * @arg {Object} arg.mode - The search mode (filename, filename_and_content, or
 * deleted_filename). Note that searching file content is only available for
 * Dropbox Business accounts.
 * @returns {Object}
 */
routes.filesSearch = function (arg) {
  return this.request('files/search', arg, 'api', 'rpc');
};

/**
 * Allows an owner or editor (if the ACL update policy allows) of a shared
 * folder to add another member. For the new member to get access to all the
 * functionality for this folder, you will need to call mount_folder on their
 * behalf. Apps must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingAddFolderMember
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Array} arg.members - The intended list of members to add.  Added
 * members will receive invites to join the shared folder.
 * @arg {Boolean} arg.quiet - Whether added members should be notified via email
 * and device notifications of their invite.
 * @arg {String|null} arg.custom_message - Optional message to display to added
 * members in their invitation.
 * @returns {null}
 */
routes.sharingAddFolderMember = function (arg) {
  return this.request('sharing/add_folder_member', arg, 'api', 'rpc');
};

/**
 * Returns the status of an asynchronous job. Apps must have full Dropbox access
 * to use this endpoint.
 * @function Dropbox#sharingCheckJobStatus
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 * @returns {Object}
 */
routes.sharingCheckJobStatus = function (arg) {
  return this.request('sharing/check_job_status', arg, 'api', 'rpc');
};

/**
 * Returns the status of an asynchronous job for sharing a folder. Apps must
 * have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingCheckShareJobStatus
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 * @returns {Object}
 */
routes.sharingCheckShareJobStatus = function (arg) {
  return this.request('sharing/check_share_job_status', arg, 'api', 'rpc');
};

/**
 * Create a shared link. If a shared link already exists for the given path,
 * that link is returned. Note that in the returned PathLinkMetadata, the
 * PathLinkMetadata.url field is the shortened URL if
 * CreateSharedLinkArg.short_url argument is set to true. Previously, it was
 * technically possible to break a shared link by moving or renaming the
 * corresponding file or folder. In the future, this will no longer be the case,
 * so your app shouldn't rely on this behavior. Instead, if your app needs to
 * revoke a shared link, use revoke_shared_link.
 * @function Dropbox#sharingCreateSharedLink
 * @deprecated
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to share.
 * @arg {Boolean} arg.short_url - Whether to return a shortened URL.
 * @arg {Object|null} arg.pending_upload - If it's okay to share a path that
 * does not yet exist, set this to either PendingUploadMode.file or
 * PendingUploadMode.folder to indicate whether to assume it's a file or folder.
 * @returns {Object}
 */
routes.sharingCreateSharedLink = function (arg) {
  return this.request('sharing/create_shared_link', arg, 'api', 'rpc');
};

/**
 * Create a shared link with custom settings. If no settings are given then the
 * default visibility is RequestedVisibility.public (The resolved visibility,
 * though, may depend on other aspects such as team and shared folder settings).
 * @function Dropbox#sharingCreateSharedLinkWithSettings
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to be shared by the shared link
 * @arg {Object|null} arg.settings - The requested settings for the newly
 * created shared link
 * @returns {Object}
 */
routes.sharingCreateSharedLinkWithSettings = function (arg) {
  return this.request('sharing/create_shared_link_with_settings', arg, 'api', 'rpc');
};

/**
 * Returns shared folder metadata by its folder ID. Apps must have full Dropbox
 * access to use this endpoint.
 * @function Dropbox#sharingGetFolderMetadata
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Array|null} arg.actions - Folder actions to query.
 * @returns {Object}
 */
routes.sharingGetFolderMetadata = function (arg) {
  return this.request('sharing/get_folder_metadata', arg, 'api', 'rpc');
};

/**
 * Get the shared link's metadata.
 * @function Dropbox#sharingGetSharedLinkMetadata
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.url - URL of the shared link.
 * @arg {String|null} arg.path - If the shared link is to a folder, this
 * parameter can be used to retrieve the metadata for a specific file or
 * sub-folder in this folder. A relative path should be used.
 * @arg {String|null} arg.link_password - If the shared link has a password,
 * this parameter can be used.
 * @returns {Object}
 */
routes.sharingGetSharedLinkMetadata = function (arg) {
  return this.request('sharing/get_shared_link_metadata', arg, 'api', 'rpc');
};

/**
 * Returns a list of LinkMetadata objects for this user, including collection
 * links. If no path is given or the path is empty, returns a list of all shared
 * links for the current user, including collection links. If a non-empty path
 * is given, returns a list of all shared links that allow access to the given
 * path.  Collection links are never returned in this case. Note that the url
 * field in the response is never the shortened URL.
 * @function Dropbox#sharingGetSharedLinks
 * @deprecated
 * @arg {Object} arg - The request parameters.
 * @arg {String|null} arg.path - See get_shared_links description.
 * @returns {Object}
 */
routes.sharingGetSharedLinks = function (arg) {
  return this.request('sharing/get_shared_links', arg, 'api', 'rpc');
};

/**
 * Returns shared folder membership by its folder ID. Apps must have full
 * Dropbox access to use this endpoint.
 * @function Dropbox#sharingListFolderMembers
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Array|null} arg.actions - Member actions to query.
 * @arg {Number} arg.limit - The maximum number of results that include members,
 * groups and invitees to return per request.
 * @returns {Object}
 */
routes.sharingListFolderMembers = function (arg) {
  return this.request('sharing/list_folder_members', arg, 'api', 'rpc');
};

/**
 * Once a cursor has been retrieved from list_folder_members, use this to
 * paginate through all shared folder members. Apps must have full Dropbox
 * access to use this endpoint.
 * @function Dropbox#sharingListFolderMembersContinue
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - The cursor returned by your last call to
 * list_folder_members or list_folder_members/continue.
 * @returns {Object}
 */
routes.sharingListFolderMembersContinue = function (arg) {
  return this.request('sharing/list_folder_members/continue', arg, 'api', 'rpc');
};

/**
 * Return the list of all shared folders the current user has access to. Apps
 * must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingListFolders
 * @arg {Object} arg - The request parameters.
 * @arg {Number} arg.limit - The maximum number of results to return per
 * request.
 * @arg {Array|null} arg.actions - Folder actions to query.
 * @returns {Object}
 */
routes.sharingListFolders = function (arg) {
  return this.request('sharing/list_folders', arg, 'api', 'rpc');
};

/**
 * Once a cursor has been retrieved from list_folders, use this to paginate
 * through all shared folders. The cursor must come from a previous call to
 * list_folders or list_folders/continue. Apps must have full Dropbox access to
 * use this endpoint.
 * @function Dropbox#sharingListFoldersContinue
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - The cursor returned by the previous API call
 * specified in the endpoint description.
 * @returns {Object}
 */
routes.sharingListFoldersContinue = function (arg) {
  return this.request('sharing/list_folders/continue', arg, 'api', 'rpc');
};

/**
 * Return the list of all shared folders the current user can mount or unmount.
 * Apps must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingListMountableFolders
 * @arg {Object} arg - The request parameters.
 * @arg {Number} arg.limit - The maximum number of results to return per
 * request.
 * @arg {Array|null} arg.actions - Folder actions to query.
 * @returns {Object}
 */
routes.sharingListMountableFolders = function (arg) {
  return this.request('sharing/list_mountable_folders', arg, 'api', 'rpc');
};

/**
 * Once a cursor has been retrieved from list_mountable_folders, use this to
 * paginate through all mountable shared folders. The cursor must come from a
 * previous call to list_mountable_folders or list_mountable_folders/continue.
 * Apps must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingListMountableFoldersContinue
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.cursor - The cursor returned by the previous API call
 * specified in the endpoint description.
 * @returns {Object}
 */
routes.sharingListMountableFoldersContinue = function (arg) {
  return this.request('sharing/list_mountable_folders/continue', arg, 'api', 'rpc');
};

/**
 * List shared links of this user. If no path is given or the path is empty,
 * returns a list of all shared links for the current user. If a non-empty path
 * is given, returns a list of all shared links that allow access to the given
 * path - direct links to the given path and links to parent folders of the
 * given path. Links to parent folders can be suppressed by setting direct_only
 * to true.
 * @function Dropbox#sharingListSharedLinks
 * @arg {Object} arg - The request parameters.
 * @arg {String|null} arg.path - See list_shared_links description.
 * @arg {String|null} arg.cursor - The cursor returned by your last call to
 * list_shared_links.
 * @arg {Boolean|null} arg.direct_only - See list_shared_links description.
 * @returns {Object}
 */
routes.sharingListSharedLinks = function (arg) {
  return this.request('sharing/list_shared_links', arg, 'api', 'rpc');
};

/**
 * Modify the shared link's settings. If the requested visibility conflict with
 * the shared links policy of the team or the shared folder (in case the linked
 * file is part of a shared folder) then the LinkPermissions.resolved_visibility
 * of the returned SharedLinkMetadata will reflect the actual visibility of the
 * shared link and the LinkPermissions.requested_visibility will reflect the
 * requested visibility.
 * @function Dropbox#sharingModifySharedLinkSettings
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.url - URL of the shared link to change its settings
 * @arg {Object} arg.settings - Set of settings for the shared link.
 * @arg {Boolean} arg.remove_expiration - If set to true, removes the expiration
 * of the shared link.
 * @returns {Object}
 */
routes.sharingModifySharedLinkSettings = function (arg) {
  return this.request('sharing/modify_shared_link_settings', arg, 'api', 'rpc');
};

/**
 * The current user mounts the designated folder. Mount a shared folder for a
 * user after they have been added as a member. Once mounted, the shared folder
 * will appear in their Dropbox. Apps must have full Dropbox access to use this
 * endpoint.
 * @function Dropbox#sharingMountFolder
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID of the shared folder to mount.
 * @returns {Object}
 */
routes.sharingMountFolder = function (arg) {
  return this.request('sharing/mount_folder', arg, 'api', 'rpc');
};

/**
 * The current user relinquishes their membership in the designated shared
 * folder and will no longer have access to the folder.  A folder owner cannot
 * relinquish membership in their own folder. This will run synchronously if
 * leave_a_copy is false, and asynchronously if leave_a_copy is true. Apps must
 * have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingRelinquishFolderMembership
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Boolean} arg.leave_a_copy - Keep a copy of the folder's contents upon
 * relinquishing membership.
 * @returns {Object}
 */
routes.sharingRelinquishFolderMembership = function (arg) {
  return this.request('sharing/relinquish_folder_membership', arg, 'api', 'rpc');
};

/**
 * Allows an owner or editor (if the ACL update policy allows) of a shared
 * folder to remove another member. Apps must have full Dropbox access to use
 * this endpoint.
 * @function Dropbox#sharingRemoveFolderMember
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Object} arg.member - The member to remove from the folder.
 * @arg {Boolean} arg.leave_a_copy - If true, the removed user will keep their
 * copy of the folder after it's unshared, assuming it was mounted. Otherwise,
 * it will be removed from their Dropbox. Also, this must be set to false when
 * kicking a group.
 * @returns {Object}
 */
routes.sharingRemoveFolderMember = function (arg) {
  return this.request('sharing/remove_folder_member', arg, 'api', 'rpc');
};

/**
 * Revoke a shared link. Note that even after revoking a shared link to a file,
 * the file may be accessible if there are shared links leading to any of the
 * file parent folders. To list all shared links that enable access to a
 * specific file, you can use the list_shared_links with the file as the
 * ListSharedLinksArg.path argument.
 * @function Dropbox#sharingRevokeSharedLink
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.url - URL of the shared link.
 * @returns {null}
 */
routes.sharingRevokeSharedLink = function (arg) {
  return this.request('sharing/revoke_shared_link', arg, 'api', 'rpc');
};

/**
 * Share a folder with collaborators. Most sharing will be completed
 * synchronously. Large folders will be completed asynchronously. To make
 * testing the async case repeatable, set `ShareFolderArg.force_async`. If a
 * ShareFolderLaunch.async_job_id is returned, you'll need to call
 * check_share_job_status until the action completes to get the metadata for the
 * folder. Apps must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingShareFolder
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.path - The path to the folder to share. If it does not
 * exist, then a new one is created.
 * @arg {Object} arg.member_policy - Who can be a member of this shared folder.
 * Only applicable if the current user is on a team.
 * @arg {Object} arg.acl_update_policy - Who can add and remove members of this
 * shared folder.
 * @arg {Object} arg.shared_link_policy - The policy to apply to shared links
 * created for content inside this shared folder.  The current user must be on a
 * team to set this policy to SharedLinkPolicy.members.
 * @arg {Boolean} arg.force_async - Whether to force the share to happen
 * asynchronously.
 * @returns {Object}
 */
routes.sharingShareFolder = function (arg) {
  return this.request('sharing/share_folder', arg, 'api', 'rpc');
};

/**
 * Transfer ownership of a shared folder to a member of the shared folder. User
 * must have AccessLevel.owner access to the shared folder to perform a
 * transfer. Apps must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingTransferFolder
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {String} arg.to_dropbox_id - A account or team member ID to transfer
 * ownership to.
 * @returns {null}
 */
routes.sharingTransferFolder = function (arg) {
  return this.request('sharing/transfer_folder', arg, 'api', 'rpc');
};

/**
 * The current user unmounts the designated folder. They can re-mount the folder
 * at a later time using mount_folder. Apps must have full Dropbox access to use
 * this endpoint.
 * @function Dropbox#sharingUnmountFolder
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @returns {null}
 */
routes.sharingUnmountFolder = function (arg) {
  return this.request('sharing/unmount_folder', arg, 'api', 'rpc');
};

/**
 * Allows a shared folder owner to unshare the folder. You'll need to call
 * check_job_status to determine if the action has completed successfully. Apps
 * must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingUnshareFolder
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Boolean} arg.leave_a_copy - If true, members of this shared folder will
 * get a copy of this folder after it's unshared. Otherwise, it will be removed
 * from their Dropbox. The current user, who is an owner, will always retain
 * their copy.
 * @returns {Object}
 */
routes.sharingUnshareFolder = function (arg) {
  return this.request('sharing/unshare_folder', arg, 'api', 'rpc');
};

/**
 * Allows an owner or editor of a shared folder to update another member's
 * permissions. Apps must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingUpdateFolderMember
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Object} arg.member - The member of the shared folder to update.  Only
 * the MemberSelector.dropbox_id may be set at this time.
 * @arg {Object} arg.access_level - The new access level for member.
 * AccessLevel.owner is disallowed.
 * @returns {null}
 */
routes.sharingUpdateFolderMember = function (arg) {
  return this.request('sharing/update_folder_member', arg, 'api', 'rpc');
};

/**
 * Update the sharing policies for a shared folder. User must have
 * AccessLevel.owner access to the shared folder to update its policies. Apps
 * must have full Dropbox access to use this endpoint.
 * @function Dropbox#sharingUpdateFolderPolicy
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.shared_folder_id - The ID for the shared folder.
 * @arg {Object|null} arg.member_policy - Who can be a member of this shared
 * folder. Only applicable if the current user is on a team.
 * @arg {Object|null} arg.acl_update_policy - Who can add and remove members of
 * this shared folder.
 * @arg {Object|null} arg.shared_link_policy - The policy to apply to shared
 * links created for content inside this shared folder. The current user must be
 * on a team to set this policy to SharedLinkPolicy.members.
 * @returns {Object}
 */
routes.sharingUpdateFolderPolicy = function (arg) {
  return this.request('sharing/update_folder_policy', arg, 'api', 'rpc');
};

/**
 * Get information about a user's account.
 * @function Dropbox#usersGetAccount
 * @arg {Object} arg - The request parameters.
 * @arg {String} arg.account_id - A user's account identifier.
 * @returns {Object}
 */
routes.usersGetAccount = function (arg) {
  return this.request('users/get_account', arg, 'api', 'rpc');
};

/**
 * Get information about multiple user accounts.  At most 300 accounts may be
 * queried per request.
 * @function Dropbox#usersGetAccountBatch
 * @arg {Object} arg - The request parameters.
 * @arg {Array} arg.account_ids - List of user account identifiers.  Should not
 * contain any duplicate account IDs.
 * @returns {Object}
 */
routes.usersGetAccountBatch = function (arg) {
  return this.request('users/get_account_batch', arg, 'api', 'rpc');
};

/**
 * Get information about the current user's account.
 * @function Dropbox#usersGetCurrentAccount
 * @arg {null} arg - The request parameters.
 * @returns {Object}
 */
routes.usersGetCurrentAccount = function (arg) {
  return this.request('users/get_current_account', arg, 'api', 'rpc');
};

/**
 * Get the space usage information for the current user's account.
 * @function Dropbox#usersGetSpaceUsage
 * @arg {null} arg - The request parameters.
 * @returns {Object}
 */
routes.usersGetSpaceUsage = function (arg) {
  return this.request('users/get_space_usage', arg, 'api', 'rpc');
};

module.exports = routes;
